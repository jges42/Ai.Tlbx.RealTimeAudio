@page "/"
@using Ai.Tlbx.RealTimeAudio.OpenAi
@using Ai.Tlbx.RealTimeAudio.OpenAi.Models
@using Ai.Tlbx.RealTimeAudio.OpenAi.Tools
@using Ai.Tlbx.RealTimeAudio.OpenAi.Tools.BuiltInTools
@using Ai.Tlbx.RealTimeAudio.OpenAi.Tools.Models
@rendermode InteractiveServer
@inject OpenAiRealTimeApiAccess rta
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>AI Voice Chat</PageTitle>

<div class="container mx-auto p-4">
    <div class="flex flex-col lg:flex-row gap-4">
        <!-- Controls Panel -->
        <div class="lg:w-1/3">
            <div class="bg-white rounded-lg shadow-md p-4 mb-4">
                <h3 class="text-xl font-bold text-gray-800 mb-4">Voice Controls</h3>
                
                <div class="flex gap-2 mb-4">
                    <button class="flex-1 py-2 px-4 rounded-md @(rta.IsRecording ? "bg-gray-500" : "bg-blue-600") text-white font-medium hover:bg-opacity-90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center" 
                            @onclick="StartSession"
                            disabled="@(rta.IsRecording || rta.IsConnecting)">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clip-rule="evenodd" />
                        </svg>
                        Start
                    </button>
                    <button class="flex-1 py-2 px-4 rounded-md @(rta.IsRecording ? "bg-red-600" : "bg-gray-500") text-white font-medium hover:bg-opacity-90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center" 
                            @onclick="StopSession"
                            disabled="@(!rta.IsRecording || rta.IsConnecting)">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
                        </svg>
                        Stop
                    </button>
                    <button class="flex-1 py-2 px-4 rounded-md bg-amber-500 text-white font-medium hover:bg-opacity-90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center" 
                            @onclick="InterruptSpeech"
                            disabled="@(!rta.IsInitialized || rta.IsConnecting)">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                        Interrupt
                    </button>
                </div>

                <div class="mb-4">
                    <label for="voiceSelect" class="block text-sm font-medium text-gray-700 mb-1">Assistant Voice</label>
                    <select id="voiceSelect" class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                            @bind="CurrentVoiceString" 
                            disabled="@rta.IsConnecting">
                        <option value="alloy">Alloy</option>
                        <option value="ash">Ash</option>
                        <option value="ballad">Ballad</option>
                        <option value="coral">Coral</option>
                        <option value="echo">Echo</option>
                        <option value="fable">Fable</option>
                        <option value="nova">Nova</option>
                        <option value="onyx">Onyx</option>
                        <option value="sage">Sage</option>
                        <option value="shimmer">Shimmer</option>
                        <option value="verse">Verse</option>
                    </select>
                </div>

                <div class="mb-4 flex items-center">
                    <input type="checkbox" id="timeToolCheck" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 mr-2" 
                           @bind="useTimeTool" 
                           disabled="@rta.IsRecording"> 
                    <label for="timeToolCheck" class="text-sm font-medium text-gray-700">Enable Current Time Tool</label>
                </div>

                <div class="mt-4">
                    <button class="w-full py-2 px-4 rounded-md bg-gray-200 text-gray-800 font-medium hover:bg-gray-300 transition-colors flex items-center justify-center"
                            @onclick="ClearChat"
                            disabled="@(rta.IsConnecting)">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                        Clear Chat
                    </button>
                </div>
                
                <div class="mt-4">
                    <button class="w-full py-2 px-4 rounded-md bg-indigo-500 text-white font-medium hover:bg-indigo-600 transition-colors flex items-center justify-center"
                            @onclick="TestMicrophone"
                            disabled="@(rta.IsRecording || rta.IsMicrophoneTesting || rta.IsConnecting)">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd" />
                        </svg>
                        Test Microphone
                    </button>
                </div>

                @if (rta.IsConnecting)
                {
                    <div class="mt-4 bg-blue-100 p-3 rounded-md">
                        <div class="flex items-center">
                            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                            <span class="text-blue-800">Connecting to OpenAI...</span>
                        </div>
                    </div>
                }
                else if (rta.IsInitialized)
                {
                    <div class="mt-4 bg-green-100 p-3 rounded-md">
                        <div class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            <span class="text-green-800">Connected with voice: <span class="font-semibold">@(currentVoiceString)</span></span>
                        </div>
                    </div>
                }

                @if (rta.LastErrorMessage != null)
                {
                    <div class="mt-4 bg-red-100 p-3 rounded-md">
                        <div class="flex items-start">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-red-600 mr-2 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                            <span class="text-red-800">@rta.LastErrorMessage</span>
                        </div>
                    </div>
                }

                @if (rta.IsMicrophoneTesting)
                {
                    <div class="mt-4 bg-indigo-100 p-3 rounded-md">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-indigo-600 mr-2"></div>
                                <span class="text-indigo-800">@micTestStatus</span>
                            </div>
                            <button 
                                class="text-xs bg-red-100 hover:bg-red-200 text-red-800 font-medium py-1 px-2 rounded" 
                                @onclick="CancelMicrophoneTest">
                                Cancel
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Chat Panel -->
        <div class="lg:w-2/3">
            <div class="bg-white rounded-lg shadow-md h-[600px] flex flex-col">
                <div class="p-4 border-b border-gray-200">
                    <h3 class="text-xl font-bold text-gray-800">Conversation</h3>
                </div>
                
                <div class="flex-1 p-4 overflow-y-auto space-y-4" id="chat-messages" @ref="chatContainer">
                    @if (!rta.ChatHistory.Any())
                    {
                        <div class="h-full flex items-center justify-center text-gray-500">
                            <div class="text-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" /></svg>
                                <p>Start speaking to begin a conversation</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        @foreach (var message in rta.ChatHistory)
                        {
                            @if (message.Role == OpenAiChatMessage.UserRole)
                            {
                                <!-- User Message -->
                                <div class="flex justify-end">
                                    <div class="max-w-[80%] rounded-lg px-4 py-2 bg-blue-600 text-white">
                                        <p class="whitespace-pre-wrap">@message.Content</p>
                                        <div class="text-xs text-blue-200 mt-1 text-right">
                                            @message.Timestamp.ToString("h:mm tt")
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (message.Role == OpenAiChatMessage.AssistantRole)
                            {
                                <!-- Assistant Message -->
                                <div class="flex justify-start">
                                    <div class="max-w-[80%] rounded-lg px-4 py-2 bg-gray-200 text-gray-800">
                                        <p class="whitespace-pre-wrap">@message.Content</p>
                                        <div class="text-xs text-gray-500 mt-1">
                                            @message.Timestamp.ToString("h:mm tt")
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (message.Role == OpenAiChatMessage.ToolCallRole)
                            {
                                <!-- Tool Call Message -->
                                <div class="flex justify-center">
                                    <div class="w-[90%] rounded-md px-3 py-2 bg-purple-100 text-purple-800 border border-purple-200 text-sm">
                                        <div class="flex items-center font-medium mb-1">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10h6c2 0 2.343 2.343 2.343 2.343m-1.171 4.314A8 8 0 016.343 7.343m11.314 11.314a8 8 0 00-11.314-11.314" /></svg>
                                            <span>Tool Call: @message.ToolName</span>
                                            <span class="text-xs text-purple-500 ml-auto">@message.Timestamp.ToString("h:mm:ss tt")</span>
                                        </div>
                                        <details class="mt-1">
                                            <summary class="cursor-pointer text-xs text-purple-600 hover:underline">Show Arguments</summary>
                                            <pre class="mt-1 text-xs bg-purple-50 p-2 rounded border border-purple-200 overflow-x-auto">@FormatJson(message.ToolArgumentsJson)</pre>
                                        </details>
                                    </div>
                                </div>
                            }
                            else if (message.Role == OpenAiChatMessage.ToolResultRole)
                            {
                                <!-- Tool Result Message -->
                                <div class="flex justify-center">
                                    <div class="w-[90%] rounded-md px-3 py-2 bg-teal-100 text-teal-800 border border-teal-200 text-sm">
                                        <div class="flex items-center font-medium mb-1">
                                             <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5 text-teal-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                                            <span>Tool Result: @message.ToolName</span>
                                            <span class="text-xs text-teal-500 ml-auto">@message.Timestamp.ToString("h:mm:ss tt")</span>
                                        </div>
                                        <details class="mt-1">
                                            <summary class="cursor-pointer text-xs text-teal-600 hover:underline">Show Result</summary>
                                            <pre class="mt-1 text-xs bg-teal-50 p-2 rounded border border-teal-200 overflow-x-auto">@FormatJson(message.ToolResultJson)</pre>
                                        </details>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
                
                <div class="p-3 border-t border-gray-200 bg-gray-50 text-sm text-gray-600">
                    @if (rta.IsRecording)
                    {
                        <div class="flex items-center">
                            <div class="relative h-3 w-3 mr-2">
                                <span class="animate-ping absolute h-3 w-3 rounded-full bg-red-400 opacity-75"></span>
                                <span class="absolute h-3 w-3 rounded-full bg-red-500"></span>
                            </div>
                            <span>Listening... Just speak naturally.</span>
                        </div>
                    }
                    else
                    {
                        <span>Click Start to begin recording</span>
                    }
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(rta.ConnectionStatus))
            {
                <div class="mt-4 bg-gray-100 p-3 rounded-md text-gray-700 text-sm">
                    <strong>Status:</strong> @rta.ConnectionStatus
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ElementReference chatContainer;
    private string currentVoiceString = string.Empty;
    private string micTestStatus = "Testing microphone...";
    private bool useTimeTool = true;
    private bool isToolDetailsExpanded = false; // Example state for expand/collapse (if needed beyond <details>)

    protected override void OnInitialized()
    {
        rta.ConnectionStatusChanged += OnConnectionStatusChanged;
        rta.MessageAdded += OnMessageAdded;
        rta.MicrophoneTestStatusChanged += OnMicrophoneTestStatusChanged;
        
        // Initialize the string value based on the current enum value
        currentVoiceString = rta.CurrentVoice.ToString().ToLower();
    }

    // Convert between string and enum
    private string CurrentVoiceString
    {
        get => currentVoiceString;
        set
        {
            currentVoiceString = value;
            // Parse the string to the enum and update the API
            if (Enum.TryParse<AssistantVoice>(value, true, out var voiceEnum))
            {
                rta.CurrentVoice = voiceEnum;
            }
        }
    }

    private void OnConnectionStatusChanged(object? sender, string status)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnMessageAdded(object? sender, OpenAiChatMessage message)
    {
        InvokeAsync(async () => {
            StateHasChanged();
            await Task.Delay(50); // Give the DOM time to update
            await ScrollToBottom();
        });
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
        }
        catch
        {
            // Ignore JS interop errors
        }
    }

    private async Task StartSession()
    {
        // Get current settings or create new settings
        var settings = rta.Settings.Clone();
        
        // Clear any previously registered tools
        settings.RegisteredTools.Clear();
        settings.Tools.Clear();
        
        // Add TimeTool if enabled
        if (useTimeTool)
        {
            var timeTool = new TimeTool();
            settings.RegisteredTools.Add(timeTool);
            settings.Tools.Add(timeTool.GetToolDefinition());
        }
        
        // Start the session with the configured settings
        await rta.Start(settings);
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task StopSession()
    {
        await rta.Stop();
        await InvokeAsync(StateHasChanged);
    }

    private async Task InterruptSpeech()
    {
        await rta.InterruptSpeech();
        await InvokeAsync(StateHasChanged);
    }

    private void ClearChat()
    {
        rta.ClearChatHistory();
        InvokeAsync(StateHasChanged);
    }

    private async Task TestMicrophone()
    {
        await rta.TestMicrophone();
        await InvokeAsync(StateHasChanged);
    }

    private void OnMicrophoneTestStatusChanged(object? sender, string status)
    {
        micTestStatus = status;
        InvokeAsync(StateHasChanged);
    }

    private void CancelMicrophoneTest()
    {
        rta.CancelMicrophoneTest();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        rta.ConnectionStatusChanged -= OnConnectionStatusChanged;
        rta.MessageAdded -= OnMessageAdded;
        rta.MicrophoneTestStatusChanged -= OnMicrophoneTestStatusChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add JS helper function for scrolling
            await JS.InvokeVoidAsync("eval", @"
                window.scrollToBottom = function(element) {
                    if (element) {
                        element.scrollTop = element.scrollHeight;
                    }
                }
            ");
        }
    }

    // Helper function to format JSON for display
    private string FormatJson(string? jsonString)
    {
        if (string.IsNullOrWhiteSpace(jsonString))
        {    
            return "(empty)";
        }
        try
        {
            using var jsonDoc = System.Text.Json.JsonDocument.Parse(jsonString);
            return System.Text.Json.JsonSerializer.Serialize(jsonDoc, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        }
        catch (System.Text.Json.JsonException)
        {
            // If it's not valid JSON, return the original string
            return jsonString;
        }
        catch (Exception ex)
        {
            return $"Error formatting JSON: {ex.Message}";
        }
    }
}

